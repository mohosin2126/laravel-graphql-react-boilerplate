
type User {
    id: ID!
    role: String!
    first_name: String
    last_name: String
    email: String!
    email_verified_at: DateTime
    created_at: DateTime!
    updated_at: DateTime!
}

input UserPayload {
    first_name: String
    last_name: String
    email: String!
    email_verified_at: DateTime
}


extend type Query {
    getAllUser(
        first_name: String @where(operator: "like")
        last_name: String @where(operator: "like")
        email: String @where(operator: "like")
        role: String @where(operator: "=")
    ): [User!]! @paginate(defaultCount: 10) @canAccess(requiredRole: "admin")
    getUser(
        id: ID @eq @rules(apply: ["prohibits:email", "required_without:email"])
        email: String @eq @rules(apply: ["prohibits:id", "required_without:id", "email"])
    ): User @find @canAccess(requiredRole: "admin")
}

extend type Mutation {
    createUser(input: UserPayload! @spread): User! @create @canAccess(requiredRole: "admin")
    updateUser(
        id: ID! @eq @rules(apply: ["prohibits:email", "required_without:email"])
        email: String @eq @rules(apply: ["prohibits:id", "required_without:id", "email"])
        input: UserPayload! @spread
    ): User! @update @canAccess(requiredRole: "admin")
    deleteUser(
        id: ID! @eq @rules(apply: ["prohibits:email", "required_without:email"])
        email: String @eq @rules(apply: ["prohibits:id", "required_without:id", "email"])
    ): User! @delete @canAccess(requiredRole: "admin")
}

